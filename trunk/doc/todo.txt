===== GeToDo TODO =====

- write some testing code to test the libgetodo
	* Tag, TagPersistence
	* FilterRule, FilterRulePersistence
	- Task - test new recurrence methods
	- TaskPersistence!
	-	TaskManager!
	* Date, DateTime
	* Recurrence, RecurrenceDaily, RecurrenceWeekly, RecurrenceMonthly,
		RecurrenceYearly, RecurrenceIntervalDays
	- [Duration, ...]		
- write custom TreeModel for Task and FilerRule 
*- think of an API between lib and GUI
- complete design GUI in Glade
	- editing panel (remake it), menu, toolbar...
	- Question: how to embed .glade file into the final .exe file?
	  - Is it needed?

- delete operator - don't check if the deleted pointer isn't NULL, it's redundant
- Task - add bool done field (to SQL, field, access methods, serialization)
- Recurrence
	- next() for RecurrenceWeekly, RecurrenceMonthly
	- use facet for RecurrenceIntervalDays and possibly RecurrenceYearly
- Task - make simple properties public and remove their getters/setters (really?)
- *Persistence - make a common interface
- use operator= for copying Tasks and Tags
- think whether really use pointers to Task, Tag, ...
- think of a common interface to persistent objects (Task, Tag, FilterRule)
- user operator<< and operator>> for I/O of objects like DateTime, Tag, ...  
- DateTime, Date
	- discard static toString() and move the code to the non-static method
	- output special date values as ""
- FilterRule - think of format and function
- Task - think of priority:
	- explicitly set
	- computed from other things
- TaskManager - write filtering code
- Duration, FuzzyDate - think of
- use exceptions!
- avoid duplicating code!!!
- save sqlite table names somewhere as constants
- database triggers for checking date format validity

== Done - kept for reference ==

* use boost::lexical_cast instead of stringstream for simple type conversions
* run autoreconf --install (only once)
* set LD_CONFIG_... for running main executable (for .so libraries)
